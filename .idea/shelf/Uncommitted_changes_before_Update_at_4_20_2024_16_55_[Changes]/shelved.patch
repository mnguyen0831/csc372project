Index: hello_world.;]
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>_write \"hello world\" .
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hello_world.;] b/hello_world.;]
--- a/hello_world.;]	(revision 70fc2a4abf0bb42ba101316fb50acecd9cd79643)
+++ b/hello_world.;]	(date 1713654617644)
@@ -1,1 +1,3 @@
-_write "hello world" .
\ No newline at end of file
+_write "hello world" .
+_int a _is 1 .
+_writeline a .
\ No newline at end of file
Index: runSmiley.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from scanSmiley import scanLine, scanSmiley\r\nimport parseSmiley as smile\r\nimport argparse\r\n\r\ninput_line: str\r\ninput_file: str\r\noutput_file: str\r\nprint_ast: bool\r\nprint_vars: bool\r\nprogram: list[list[str]]\r\nvariables: dict[str, list[str, bool | int | str]] # key: id, val: [type, value], types are {'_int', '_bool', '_str', 'const _int', 'const _bool', 'const _str}\r\ncur_line: int\r\n\r\n# Files can be run using:\r\n# python runSmiley.py --input-file 'sample.;]'\r\n# python runSmiley.py --input-line '1 + 2 + 3 .'\r\n\r\ndef main() -> None:\r\n    global program, variables, print_ast, print_vars, cur_line\r\n    variables = dict()\r\n    cur_line = 1\r\n    print(smile.expr('\"Answer is: \" + ( ( 1 + ( 1 * 5 ) - 4 ) % 2 ) + \".\" .'.split(), variables, 1))\r\n    getInput()\r\n    if input_file is None:\r\n        program = [scanLine(input_line)]\r\n    else:\r\n        program = scanSmiley(input_file)\r\n    while cur_line - 1 < len(program):\r\n        print(f\"Executing line {cur_line}: {program[cur_line - 1]}\")\r\n        execute(program[cur_line - 1])\r\n    if print_ast:\r\n        print(\"Print AST not implemented.\")\r\n    if print_vars:\r\n        print(\"\\nVariables:\\n----------\")\r\n        for var in variables.keys():\r\n            print(f\"{var} : {variables[var]}\")\r\n\r\ndef getInput() -> None:\r\n    global input_line, input_file, output_file, print_ast, print_vars\r\n    parser = argparse.ArgumentParser(description='Reads command line arguments.')\r\n    parser.add_argument('--input-line', type=str, help='Line to run')\r\n    parser.add_argument('--input-file', type=str, default=None, help='File name to run')\r\n    parser.add_argument('--output-file', type=str, help='File to write to output')\r\n    parser.add_argument('--ast', type=bool, default=False, help='Prints out Syntax Tree')\r\n    parser.add_argument('--vars', type=bool, default=False, help='Prints out Variable Dictionary')\r\n    args = parser.parse_args()\r\n    input_line = args.input_line\r\n    input_file = args.input_file\r\n    output_file = args.output_file\r\n    print_ast = args.ast\r\n    print_vars = args.vars\r\n\r\ndef execute(line: list[str]) -> None:\r\n    global variables, cur_line\r\n    if len(line) == 0:\r\n        cur_line += 1\r\n        return\r\n    if line[0] in {'$'}:\r\n        cur_line += 1\r\n        return\r\n    if '$' in line:\r\n        line = line[:line.index('$') + 1]\r\n    elif '.' not in line:\r\n        raise Exception(f\"Line {cur_line} is not properly terminated\")\r\n    if line[0] in {'_int', '_str', '_bool'}:\r\n        variables = smile.declare(line, variables, cur_line)\r\n        #print(f\"Variables updated: {variables}\")\r\n    elif line[0] in variables.keys():\r\n        variables = smile.assign(line, variables, cur_line)\r\n        #print(f\"Variables updated: {variables}\")\r\n    elif line[0] == '_read':\r\n        pass # variables = smile.read(line, variables, cur_line)\r\n    elif line[0] in {'_write', '_writeline'}:\r\n        pass #smile.print(line, variables)\r\n    else:\r\n        if line[0].isnumeric() or line[0][0] == '_' or line[0][0].isupper():\r\n            raise Exception(f\"'{line[0]}' at line {cur_line} is an invalid name for a variable\")\r\n        else:\r\n            raise Exception(f\"Variable '{line[0]}' at line {cur_line} hasn't been declared\")\r\n    cur_line += 1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/runSmiley.py b/runSmiley.py
--- a/runSmiley.py	(revision 70fc2a4abf0bb42ba101316fb50acecd9cd79643)
+++ b/runSmiley.py	(date 1713651026108)
@@ -69,9 +69,9 @@
         variables = smile.assign(line, variables, cur_line)
         #print(f"Variables updated: {variables}")
     elif line[0] == '_read':
-        pass # variables = smile.read(line, variables, cur_line)
+        variables = smile.read(line, variables, cur_line)
     elif line[0] in {'_write', '_writeline'}:
-        pass #smile.print(line, variables)
+        smile.printst(line, variables, cur_line)
     else:
         if line[0].isnumeric() or line[0][0] == '_' or line[0][0].isupper():
             raise Exception(f"'{line[0]}' at line {cur_line} is an invalid name for a variable")
Index: parseSmiley.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>def declare(line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> dict[str,  list[int | bool | str | None]]:\r\n    # <declare st> ::= <type> <var id> . | <type> <const id> _is <literal> .\r\n    var = variables.copy()\r\n    if len(line) < 3:\r\n        if line[1][0].islower():\r\n            if line[2] == '_is':\r\n                raise Exception(f\"Variable '{line[1]}' at line {lnum} cannot be assigned at declaration\")\r\n        raise Exception(f\"Declare statement syntax at line {lnum} is incorrect\")\r\n    if line[-1] != '.':\r\n        raise Exception(f\"Line {lnum} not terminated with '.'\")\r\n    if line[1][0].islower():\r\n        var[line[1]] = [line[0], None]\r\n    elif line[1][0].isupper():\r\n        val = baseExpr(line[3:], var, lnum)[0] # This ensures that the constant is declared with a literal\r\n        validateVal(line[0], val, lnum)\r\n        var[line[1]] = ['const ' + line[0], val]\r\n    return var \r\n\r\ndef assign(line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> dict[str,  list[int | bool | str | None]]:\r\n    # <assign st> ::= <var id> _is <expr> . | <var id> ++ . | <var id> += <expr> .\r\n    var = variables.copy()\r\n    if len(line) < 3:\r\n        raise SyntaxError(f\"Assign statement syntax at line {lnum} is incorrect\")\r\n    if line[1] == '_is':\r\n        # Checks if the variable type is a constant\r\n        if len(var[line[0]][0]) > 5:\r\n            raise TypeError(f\"Constant {line[0]} of type {var[line[0]][0]} on line {lnum} cannot be reassigned.\")\r\n        val = evalExpr(line[2:], variables, lnum) # Passes <expr> and outputs value of the entire expression\r\n        validateVal(var[line[0]][0], val, lnum) # Checks that the type of the variable matches the type of the value\r\n        var[line[0]][1] = val # Assigns value to variable now that the value has been validated\r\n    elif line[1] == '++':\r\n        if var[line[0]][0] == '_int':\r\n            if var[line[0]][1] is None:\r\n                raise Exception(f\"Variable '{line[0]}' at line {lnum} hasn't been initialized yet\")\r\n            var[line[0]][1] += 1\r\n        elif var[line[0]][0] == 'const _int':\r\n            raise Exception(f\"Constant '{line[0]}' at line {lnum} cannot be reassigned\")\r\n        else:\r\n            raise Exception(f\"Operation '++' at line {lnum} is invalid for {var[line[0]][0]} types\")\r\n    elif line[1] == '+=':\r\n        if var[line[0]][0] == '_int':\r\n            if var[line[0]][1] is None:\r\n                raise Exception(f\"Variable '{line[0]}' hasn't been initialized yet\")\r\n            val = evalExpr(line[2:], variables, lnum)\r\n            validateVal(var[line[0]][0], val, lnum)\r\n            var[line[0]][1] += val\r\n        elif var[line[0]][0] == 'const _int':\r\n            raise Exception(f\"Constant '{line[0]}' at line {lnum} cannot be reassigned\")\r\n        else:\r\n            raise Exception(f\"Operation '+=' at line {lnum} is invalid for {var[line[0]][0]} types\")\r\n    return var\r\n\r\n#####################    EXPRESSIONS    ###########################################################################################################\r\n\r\n# Pass in the portion of line that is the expression, which should be the \r\n# rest of the line (include the '.' token), the current variables list, and the line number lnum\r\n# ex.\r\n# In the line 'b _is \"The answer is: \" + c + \".\" .' \r\n# a = ['b', '_is', '\"The', 'answer', 'is:', '\"', '+', 'c', '+', '\".\"', '.']\r\n# pass in a[2:], which is: ['\"The', 'answer', 'is:', '\"', '+', 'c', '+', '\".\"', '.']\r\ndef evalExpr(line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> int | bool | str:\r\n    return expr(line, variables, lnum)[0]\r\n\r\ndef expr(line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    val = None\r\n    cur = None\r\n    if line[0] in {'-', '^'}:\r\n        val, cur = unaryExpr(line, variables, lnum)\r\n    elif line[0] in {'('}:\r\n        val, cur = parenExpr(line, variables, lnum)\r\n    else:\r\n        val, cur = baseExpr(line, variables, lnum)\r\n    if len(cur) != 0 and cur[0] in {'*', '/', '%'}:\r\n        val, cur = multiExpr(val, cur, variables, lnum)\r\n    if len(cur) != 0 and cur[0] in {'+', '-'}:\r\n        val, cur = addExpr(val, cur, variables, lnum)\r\n    if len(cur) != 0 and cur[0] in {'!=', '<', '<=', '=', '>', '>='}:\r\n        val, cur = compExpr(val, cur, variables, lnum)\r\n    if len(cur) != 0 and cur[0] in {'&'}:\r\n        val, cur = andExpr(val, cur, variables, lnum)\r\n    if len(cur) != 0 and cur[0] in {'|'}:\r\n        val, cur = orExpr(val, cur, variables, lnum)\r\n    if len(cur) != 0 and cur[0] != '.' and cur[0] != '_do':\r\n        raise ValueError(f\"Token '{cur[0]}' on line {lnum} is an invalid operator\")\r\n    return val, cur\r\n\r\ndef unaryExpr(line: list[str], variables: dict[str, list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    val = None\r\n    cur = None\r\n    if line[0] == '-':\r\n        val, cur = expr(line[1:], variables, lnum)\r\n        if not isinstance(val, int):\r\n            raise TypeError(f\"value '{val}' on line {lnum} is not an _int, and cannot be used with the '-' operator\")\r\n        val = -val\r\n    elif line[0] == '^':\r\n        val, cur = expr(line[1:], variables, lnum)\r\n        if not isinstance(val, bool):\r\n            raise TypeError(f\"value '{val}' on line {lnum} is not a _bool, and cannot be used with the '^' operator\")\r\n        val = not val\r\n    return val, cur\r\n\r\ndef parenExpr(line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    lineStr = (' ').join(line)[1:]\r\n    parens = 1\r\n    i = 0\r\n    for char in lineStr:\r\n        if parens == 0:\r\n            break\r\n        if char == ')':\r\n            parens -= 1\r\n        elif char == '(':\r\n            parens += 1\r\n        i += 1\r\n    if parens != 0:\r\n        raise Exception(f\"Missing parentheses on line {lnum}\")\r\n    return expr(lineStr[:i - 1].split(), variables, lnum)[0], lineStr[i:].split()\r\n\r\ndef baseExpr(line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    lenVal = 0\r\n    val = None\r\n    if line[0] in variables.keys():\r\n        return variables[line[0]][1]\r\n    elif line[0].isnumeric():\r\n        val = validateInt(line[0], lnum)\r\n        lenVal = len(line[0])\r\n    elif line[0][0] == '\"':\r\n        val = validateStr((' ').join(line), lnum)\r\n        lenVal = len(val) + 2\r\n    elif line[0] in {':)', '(:', ':^)', '(^:', ':`)', '(`:', ':(', '):', ':^(', ')^:', ':`(', ')`:'}:\r\n        val = validateBool(line[0], lnum)\r\n        lenVal = len(line[0]) \r\n    else:\r\n        raise ValueError(f\"Token '{line[0]}' on line {lnum} is not a valid value\")\r\n    return val, (' ').join(line)[lenVal:].split()\r\n\r\ndef multiExpr(val: int, line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    cur = line.copy()\r\n    lhs = val\r\n    while len(cur) != 0 and cur[0] in {'*', '/', '%'}:\r\n        op = cur[0]\r\n        if cur[1] == '-':\r\n            rhs, cur = unaryExpr(cur[1:], variables, lnum)\r\n        elif cur[1] == '(':\r\n            rhs, cur = parenExpr(cur[1:], variables, lnum)\r\n        elif cur[1] != '.':\r\n            rhs, cur = baseExpr(cur[1:], variables, lnum)\r\n        else:\r\n            break\r\n        validateLR(op, lhs, rhs, lnum)\r\n        if op == '*':\r\n            lhs = lhs * rhs\r\n        elif op == '/':\r\n            lhs = lhs // rhs\r\n        else:\r\n            lhs = lhs % rhs\r\n    return lhs, cur\r\n\r\ndef addExpr(val: int, line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    cur = line.copy()\r\n    lhs = val\r\n    while len(cur) != 0 and cur[0] in {'+', '-'}:\r\n        op = cur[0]\r\n        if cur[1] == '-':\r\n            rhs, cur = unaryExpr(cur[1:], variables, lnum)\r\n        elif cur[1] == '(':\r\n            rhs, cur = parenExpr(cur[1:], variables, lnum)\r\n        elif cur[1] != '.':\r\n            rhs, cur = baseExpr(cur[1:], variables, lnum)\r\n        else:\r\n            break\r\n        if len(cur) != 0 and cur[0] in {'*', '/', '%'}:\r\n            rhs, cur = multiExpr(rhs, cur, variables, lnum)\r\n        validateLR(op, lhs, rhs, lnum)\r\n        if op == '+':\r\n            if isinstance(lhs, str):\r\n                lhs = lhs + str(rhs)\r\n            else:\r\n                lhs = lhs + rhs\r\n        else:\r\n            lhs = lhs - rhs\r\n    return lhs, cur\r\n\r\ndef compExpr(val: int | str, line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    cur = line.copy()\r\n    lhs = val\r\n    while len(cur) != 0 and cur[0] in {'!=', '<', '<=', '=', '>', '>='}:\r\n        op = cur[0]\r\n        if cur[1] == '-':\r\n            rhs, cur = unaryExpr(cur[1:], variables, lnum)\r\n        elif cur[1] == '(':\r\n            rhs, cur = parenExpr(cur[1:], variables, lnum)\r\n        elif cur[1] != '.':\r\n            rhs, cur = baseExpr(cur[1:], variables, lnum)\r\n        else:\r\n            break\r\n        if len(cur) != 0 and cur[0] in {'*', '/', '%'}:\r\n            rhs, cur = multiExpr(rhs, cur, variables, lnum)\r\n        if len(cur) != 0 and cur[0] in {'+', '-'}:\r\n            rhs, cur = addExpr(rhs, cur, variables, lnum)\r\n        validateLR(op, lhs, rhs, lnum)\r\n        if op == '!=':\r\n            lhs = lhs != rhs\r\n        elif op == '<':\r\n            lhs = lhs < rhs\r\n        elif op == '<=':\r\n            lhs = lhs <= rhs\r\n        elif op == '=':\r\n            lhs = lhs == rhs\r\n        elif op == '>':\r\n            lhs = lhs > rhs\r\n        else:\r\n            lhs = lhs >= rhs\r\n    return lhs, cur\r\n\r\ndef andExpr(val: bool, line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    cur = line.copy()\r\n    lhs = val\r\n    while len(cur) != 0 and cur[0] in {'&'}:\r\n        op = cur[0]\r\n        if cur[1] == '-':\r\n            rhs, cur = unaryExpr(cur[1:], variables, lnum)\r\n        elif cur[1] == '(':\r\n            rhs, cur = parenExpr(cur[1:], variables, lnum)\r\n        elif cur[1] != '.':\r\n            rhs, cur = baseExpr(cur[1:], variables, lnum)\r\n        else:\r\n            break\r\n        if len(cur) != 0 and cur[0] in {'*', '/', '%'}:\r\n            rhs, cur = multiExpr(rhs, cur, variables, lnum)\r\n        if len(cur) != 0 and cur[0] in {'+', '-'}:\r\n            rhs, cur = addExpr(rhs, cur, variables, lnum)\r\n        if len(cur) != 0 and cur[0] in {'!=', '<', '<=', '=', '>', '>='}:\r\n            rhs, cur = compExpr(rhs, cur, variables, lnum)\r\n        validateLR(op, lhs, rhs, lnum)\r\n        lhs = lhs and rhs\r\n    return lhs, cur\r\n\r\ndef orExpr(val: bool, line: list[str], variables: dict[str,  list[int | bool | str | None]], lnum: int) -> tuple[str | int | bool, list[str]]:\r\n    cur = line.copy()\r\n    lhs = val\r\n    while len(cur) != 0 and cur[0] in {'|'}:\r\n        op = cur[0]\r\n        if cur[1] == '-':\r\n            rhs, cur = unaryExpr(cur[1:], variables, lnum)\r\n        elif cur[1] == '(':\r\n            rhs, cur = parenExpr(cur[1:], variables, lnum)\r\n        elif cur[1] != '.':\r\n            rhs, cur = baseExpr(cur[1:], variables, lnum)\r\n        else:\r\n            break\r\n        if len(cur) != 0 and cur[0] in {'*', '/', '%'}:\r\n            rhs, cur = multiExpr(rhs, cur, variables, lnum)\r\n        if len(cur) != 0 and cur[0] in {'+', '-'}:\r\n            rhs, cur = addExpr(rhs, cur, variables, lnum)\r\n        if len(cur) != 0 and cur[0] in {'!=', '<', '<=', '=', '>', '>='}:\r\n            rhs, cur = compExpr(rhs, cur, variables, lnum)\r\n        if len(cur) != 0 and cur[0] in {'&'}:\r\n            rhs, cur = andExpr(rhs, cur, variables, lnum)\r\n        validateLR(op, lhs, rhs, lnum)\r\n        lhs = lhs or rhs\r\n    return lhs, cur\r\n\r\ndef validateInt(i: str, lnum: int) -> int:\r\n    try:\r\n        val = int(i)\r\n    except:\r\n        raise TypeError(f\"'{i}' at line {lnum} is not a valid _int value\")\r\n    return val\r\n\r\ndef validateBool(b: str, lnum: int) -> bool:\r\n    if b in {':)','(:',':^)', '(^:', ':`)', '(`:'}:\r\n        val = True\r\n    elif b in {':(','):',':^(', ')^:', ':`(', ')`:'}:\r\n        val = False\r\n    else:\r\n        raise Exception(f\"'{b}' at line {lnum} is not a valid _bool value\")\r\n    return val\r\n\r\ndef validateStr(s: str, lnum: int) -> str:\r\n    if '\"' in [*s] and '\"' in [*s][1:]:\r\n        val = s[s.index('\"') + 1: s[1:].index('\"') + 1]\r\n    else:\r\n        raise Exception(f\"line {lnum} does not have a valid _str value\")\r\n    return val\r\n\r\ndef validateVal(type: str, val: int | bool | str, lnum: int) -> None:\r\n    raiseError = False\r\n    if type == '_int' and not isinstance(val, int):\r\n        raiseError = True\r\n    if type == '_bool' and not isinstance(val, bool):\r\n        raiseError = True\r\n    if type == '_str' and not isinstance(val, str):\r\n        raiseError = True\r\n    if raiseError:\r\n        raise TypeError(f'Value {val} on line {lnum} is not type {type}')\r\n    \r\ndef validateLR(op: str, lhs: int | bool | str, rhs: int | bool | str, lnum: int) -> None:\r\n    raiseError = False\r\n    val = None\r\n    type = None\r\n    if op in {'+', '-', '*', '/', '%', \"<\", \"<=\", \">\", \">=\"}:\r\n        if op == '+' and isinstance(lhs, str):\r\n            return\r\n        elif not isinstance(lhs, int):\r\n            raiseError = True\r\n            val = lhs\r\n        elif not isinstance(rhs, int):\r\n            raiseError = True\r\n            val = rhs\r\n        type = '_int'\r\n    if op in {\"!=\", \"==\"}:\r\n        return\r\n    if op in {\"|\", \"&\"}:\r\n        if not isinstance(lhs, bool):\r\n            raiseError = True\r\n            val = lhs\r\n        elif not isinstance(rhs, bool):\r\n            raiseError = True\r\n            val = rhs\r\n        type = '_bool'\r\n    if raiseError:\r\n        print(f\"lhs: {lhs}, rhs: {rhs}\")\r\n        raise TypeError(f\"Value {val} on line {lnum} cannot be used with '{op}' not type {type}\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parseSmiley.py b/parseSmiley.py
--- a/parseSmiley.py	(revision 70fc2a4abf0bb42ba101316fb50acecd9cd79643)
+++ b/parseSmiley.py	(date 1713657148621)
@@ -50,6 +50,57 @@
             raise Exception(f"Operation '+=' at line {lnum} is invalid for {var[line[0]][0]} types")
     return var
 
+def read(line: list[str], variables: dict[str, list[int | bool | str | None]], lnum: int) -> dict[
+    str, list[int | bool | str | None]]:
+
+    # <read st> ::= _read <var id> .
+
+    var = variables.copy()
+
+    if len(line) != 3:
+        raise Exception(f"Read statement syntax at line {lnum} is incorrect")
+    if line[-1] != '.':
+        raise Exception(f"Line {lnum} not terminated with '.'")
+    if line[1][0].isupper():
+        raise Exception(f"Variable at line {lnum} can not begin with uppercase")
+    if len(var[line[1]][0]) > 5:
+        raise TypeError(f"Constant {line[0]} of type {var[line[0]][0]} on line {lnum} cannot be reassigned.")
+
+    val = evalExpr(input(), variables, lnum)
+    validateVal(var[line[1]][0], val, lnum)
+    var[line[1]][1] = val
+
+    return var
+
+def printst(line: list[str], variables: dict[str, list[int | bool | str | None]], lnum: int) -> None:
+
+    # <print st> ::= _writeline <expr> . | _write <expr> .
+
+    var = variables.copy()
+
+    if len(line) < 3:
+        raise Exception(f"Print statement syntax at line {lnum} is incorrect")
+    if line[-1] != '.':
+        raise Exception(f"Line {lnum} not terminated with '.'")
+
+    val = evalExpr(line[1:], variables, lnum)
+    if line[0] == '_write':
+        print(val, end='')
+    elif line[0] == '_writeline':
+        print(val)
+
+    # val = evalExpr(line[1:], variables, lnum)
+    # if line[0] == '_write':
+    #     if var[line[1]][0] == '_str':
+    #         print(val, end='')
+    #     else:
+    #         print(val, end='')
+    # elif line[0] == '_writeline':
+    #     if var[line[1]][0] == '_str':
+    #         print(val)
+    #     else:
+    #         print(val)
+
 #####################    EXPRESSIONS    ###########################################################################################################
 
 # Pass in the portion of line that is the expression, which should be the 
Index: input_test.;]
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/input_test.;] b/input_test.;]
new file mode 100644
--- /dev/null	(date 1713653048111)
+++ b/input_test.;]	(date 1713653048111)
@@ -0,0 +1,3 @@
+_int a .
+_read a .
+_writeline a .
\ No newline at end of file
